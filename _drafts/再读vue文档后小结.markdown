## 1. 侦听属性，计算属性和方法
`侦听属性`：相对计算属性更通用些，当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。

`计算属性`：计算属性是基于它们的依赖进行缓存的，计算属性是基于它们的依赖进行缓存的。只要依赖没有发生变化，多次访问计算属性，会立即返回之前的计算结果，而不必再次执行函数。
所以下面的计算属性降不再更新。
```
computed: {
  now: function () {
    return Date.now()
  }
}
```
也可以设置setter方法。

`方法`：每次触发重新渲染，调用方法将总会再次执行函数。

`Tip`: 如果我们需要一个计算量比较大的结果，最好选择计算属性的方式，计算属性是有缓存的，只要依赖属性不变。计算属性在大多数情况下更合适。

## 2.v-if 和 v-show
`v-if`只有在为真的时候会渲染对应的组件, 条件的切换过程是组件销毁和重建的过程，开销较大。而`v-show`是无论真假一定会渲染的，条件的切换过程是控制css属性隐藏和显示的过程。如果需要频繁地切换则用`v-show`,如果运行中几乎不变则用`v-if`

## 3.替换数组

当使用数组的非变异方法时，可以用新数组替换旧数组：
```
vm.items = example1.items.filter(function (item) {
  return item.message.match(/Foo/)
})
```
用一个含有相同元素的数组去替换原来的数组是非常高效的操作,Vue内部做了智能的、启发式的方法来使得DOM元素最大范围的重用，不比担心性能问题
